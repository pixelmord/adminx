<?php

/**
 * @file
 * Functions to support theming in the Adminx theme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Theme settings.
 *
 * -----------------------------------------------------------------------------
 */
function adminx_form_system_theme_settings_alter(&$form, &$form_state) {
  $form['custom_settings'] = array(
    '#type' => 'details',
    '#title' => t('Custom settings'),
  );
  // Add a checkbox to toggle visibility of the row weight toggle.
  $form['custom_settings']['show_row_weight_toggle'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show the row weight toggle button.'),
    '#default_value' => theme_get_setting('show_row_weight_toggle'),
  );
}
/**
 * Preprocessing.
 *
 * -----------------------------------------------------------------------------
 */
/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 *
 * For HTML document templates.
 */
function adminx_preprocess_html(&$variables) {
  // If on a node add or edit page, add a node-layout class.
  $path_args = explode('/', \Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }
  if (!theme_get_setting('show_row_weight_toggle')) {
    $variables['attributes']['class'][] = 'no-row-weight-toggle';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks.html.twig.
 *
 * For menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function adminx_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = array(
      'library' => array(
        'adminx/drupal.nav-tabs',
      ),
    );
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = array(
      'library' => array(
        'adminx/drupal.nav-tabs',
      ),
    );
  }
}

/**
 * Implements theme_preprocess_HOOK() for menu-local-task.html.twig.
 *
 * Set active class to active item.
 */
function adminx_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'tabs__tab';
  if (isset($variables['element']['#active']) && $variables['element']['#active'] == TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'is-active';
  }
}

/**
 * Implements theme_preprocess_HOOK() for menu-local-action.html.twig.
 *
 * Set classes to button-like link.
 */
function adminx_preprocess_menu_local_action(&$variables) {

  $variables['link']['#options']['attributes']['class'] = array(
    'button-action',
    'mdl-button',
    'mdl-js-button',
    'mdl-button--raised',
    'mdl-button--colored',
  );
  // @todo: We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
}

/**
 * Implements hook_preprocess_HOOK() for node-add-list.html.twig.
 *
 * For list of available node type templates.
 */
function adminx_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var \Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] = \Drupal::url('node.add', array('node_type' => $type->id()));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block-content-add-list.html.twig.
 *
 * For block content add list templates.
 *
 * Displays the list of available custom block types for creation, adding
 * separate variables for the label and url.
 */
function adminx_preprocess_block_content_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = array('query' => \Drupal::request()->query->all());
      $variables['types'][$type->id()]['url'] = \Drupal::url('block_content.add_form', array('block_content_type' => $type->id()), $options);
    }
  }
}

/**
 * Implements hook_preprocess_block() for block.html.twig.
 *
 * For block.
 *
 * Disables contextual links for all blocks.
 */
function adminx_preprocess_block(&$variables) {
  if (isset($variables['title_suffix']['contextual_links'])) {
    unset($variables['title_suffix']['contextual_links']);
    unset($variables['elements']['#contextual_links']);

    $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
  }
}

/**
 * Implements theme_preprocess_HOOK().
 *
 * For block--system-branding-block.html.twig.
 *
 * @todo: Remove as soon as logo is changed to svg.
 */
function adminx_preprocess_block__system_branding_block(&$variables) {
  $variables['attributes']['class'][] = 'block-system-branding-block';
  $variables['site_logo'] = str_replace('.svg', '.png', $variables['site_logo']);
}

/**
 * Implements hook_preprocess_HOOK() for admin-block-content.html.twig.
 *
 * For block admin page templates.
 */
function adminx_preprocess_admin_block_content(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $key => $item) {
      $variables['content'][$key]['url'] = $item['url']->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for install-page.html.twig.
 *
 * Adminx has custom styling for the install page.
 */
function adminx_preprocess_install_page(&$variables) {
  $variables['#attached']['library'][] = 'adminx/install-page';
}

/**
 * Implements hook_preprocess_HOOK() for maintainance-page.html.twig.
 *
 * Adminx has custom styling for the maintenance page.
 */
function adminx_preprocess_maintenance_page(&$variables) {
  $variables['#attached']['library'][] = 'adminx/maintenance-page';
}

/**
 * Implements theme_preprocess_HOOK() for input--submit--add.html.twig.
 *
 * Button styling for IEF form buttons.
 */
function adminx_preprocess_input__submit__add(&$variables) {
  if (isset($variables['element']['#ief_form']) && $variables['element']['#ief_form'] == 'add') {
    $variables['element']['#button_type'] = 'primary';
  }
  if (
    isset($variables['element']['#parents']) &&
    (
      in_array('ief_add_save', $variables['element']['#parents'], TRUE) ||
      in_array('ief_edit_save', $variables['element']['#parents'], TRUE) ||
      in_array('ief_reference_save', $variables['element']['#parents'], TRUE)
    )
  ) {
    $variables['element']['#button_type'] = 'primary';
  }
}

/**
 * Implements theme_preprocess_HOOK() for input--submit--save.html.twig..
 *
 * Button styling for IEF form buttons.
 */
function adminx_preprocess_input__submit__save(&$variables) {
  if (isset($variables['element']['#ief_form']) && $variables['element']['#ief_form'] == 'add') {
    $variables['element']['#button_type'] = 'primary';
  }
  if (
    isset($variables['element']['#parents']) &&
    (
      in_array('ief_add_save', $variables['element']['#parents'], TRUE) ||
      in_array('ief_edit_save', $variables['element']['#parents'], TRUE) ||
      in_array('ief_reference_save', $variables['element']['#parents'], TRUE)
    )
  ) {
    $variables['element']['#button_type'] = 'primary';
  }
}

/**
 * Implements theme_preprocess_HOOK() for input--submit.html.twig..
 *
 * Button styling for IEF form buttons.
 */
function adminx_preprocess_input__submit(&$variables) {
  if (isset($variables['element']['#ief_form']) && $variables['element']['#ief_form'] == 'add') {
    $variables['element']['#button_type'] = 'primary';
  }
  if (
    isset($variables['element']['#parents']) &&
    (
      in_array('ief_add_save', $variables['element']['#parents'], TRUE) ||
      in_array('ief_edit_save', $variables['element']['#parents'], TRUE) ||
      in_array('ief_reference_save', $variables['element']['#parents'], TRUE)
    )
  ) {
    $variables['element']['#button_type'] = 'primary';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function adminx_element_info_alter(&$type) {
  // @todo: We require Modernizr for button styling.
  if (isset($type['button'])) {
    $type['button']['#attached']['library'][] = 'core/modernizr';
  }
}

/**
 * Implements hook_form_alter().
 */
function adminx_form_alter(&$form, FormStateInterface $form_state) {
  // Make sure all forms (also such loaded via ajax for example) are MDL
  // upgraded.
  $form['#attached']['library'][] = 'adminx/material-design';
  // Improve front-end validation.
  $form['#attached']['library'][] = 'adminx/validation-improvements';
  // Set classes for VBO header.
  if (isset($form['header']['node_bulk_form'])) {
    $form['header']['#attributes']['class'][] = 'view__header';
    $form['header']['#attributes']['class'][] = 'mdl-card';
    $form['header']['#attributes']['class'][] = 'mdl-shadow--2dp';
    $form['header']['node_bulk_form']['#attributes']['class'][] = 'form--inline';
    $form['header']['node_bulk_form']['#attributes']['class'][] = 'form--inline-actions';
    $form['header']['node_bulk_form']['#attributes']['class'][] = 'mdl-card__supporting-text';
    $form['header']['node_bulk_form']['#attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Changes vertical tabs to container and adds meta information.
 */
function adminx_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = array('node_edit_form');
  $form['#attached']['library'][] = 'adminx/node-form';

  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = array(
    '#attributes' => array('class' => array('entity-meta__header')),
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -100,
    'published' => array(
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      '#access' => !$node->isNew(),
      '#attributes' => array(
        'class' => 'entity-meta__title',
      ),
    ),
    'changed' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('entity-meta__last-saved', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ),
    'author' => array(
      '#type' => 'item',
      '#wrapper_attributes' => array('class' => array('author', 'container-inline')),
      '#markup' => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()->getUsername(),
    ),
  );
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_inline_entity_form_reference_form_alter().
 *
 * Alter some input labels and descriptions for IEF for block_content.
 */
function adminx_inline_entity_form_reference_form_alter(&$reference_form, &$form_state) {
  if ($reference_form['#entity_type'] == 'block_content') {
    $reference_form['#title'] = t('Add existing Box.');
    $reference_form['entity_id']['#description'] = t('Search for existing boxes by typing their box description.');
    $reference_form['entity_id']['#title'] = t('Box');
    $classes = array(
      'mdl-button',
      'mdl-js-button',
      'mdl-button--raised',
      'mdl-button--colored',
    );
    $reference_form['actions']['ief_reference_save']['#attributes']['class'] = array_merge($reference_form['actions']['ief_reference_save']['#attributes']['class'], $classes);
    $reference_form['actions']['ief_reference_save']['#value'] = t('Add this Box');
  }
  $reference_form['#attached'] = array(
    'library' => array(
      'adminx_ui/material-design',
    ),
  );
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide additional suggestions for entity forms.
 */
function adminx_theme_suggestions_form_alter(&$suggestions, $variables) {
  if (isset($variables['element']['#entity_type'])) {
    $suggestions[] = 'form__entity';
    $suggestions[] = 'form__' . $variables['element']['#entity_type'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide additional suggestions for form buttons.
 */
function adminx_theme_suggestions_input_alter(&$suggestions, $variables) {
  if (isset($variables['element']['#type']) && $variables['element']['#type'] == 'submit') {
    if (isset($variables['element']['#ief_form'])
      && (
        $variables['element']['#ief_form'] == 'add'
        || $variables['element']['#ief_form'] == 'ief_add_existing'
      )
    ) {
      $suggestions[] = 'input__submit__add';
    }
    elseif (isset($variables['element']['#ief_row_form']) && $variables['element']['#ief_row_form'] == 'edit') {
      $suggestions[] = 'input__submit__edit';
    }
    elseif (isset($variables['element']['#ief_row_form']) && $variables['element']['#ief_row_form'] == 'remove') {
      $suggestions[] = 'input__submit__delete';
    }
    elseif (
      isset($variables['element']['#parents']) && (
        in_array('ief_add_save', $variables['element']['#parents'], TRUE)
        || in_array('ief_edit_save', $variables['element']['#parents'], TRUE)
        || in_array('ief_reference_save', $variables['element']['#parents'], TRUE)
      )
    ) {
      $suggestions[] = 'input__submit__save';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide additional suggestions for form element.
 */
function adminx_theme_suggestions_form_element_alter(&$suggestions, $variables) {
  $suggestions[] = 'form_element__' . $variables['element']['#type'];
  if ($variables['element']['#type'] == 'textarea' && ($variables['element']['#id'] == 'edit-menu-description' || strpos($variables['element']['#id'], 'edit-revision-log') !== FALSE)) {
    $suggestions[] = 'form_element__textarea_plain';
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide additional suggestions for textarea.
 */
function adminx_theme_suggestions_textarea_alter(&$suggestions, $variables) {
  if ($variables['element']['#id'] == 'edit-menu-description' || strpos($variables['element']['#id'], 'edit-revision-log') !== FALSE) {
    $suggestions[] = 'textarea__plain';
  }
}
